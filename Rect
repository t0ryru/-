class Rect (var x: Int, var y: Int, var width: Int, var height: Int) : Movable, Transforming, Figure(0) {
    // TODO: реализовать интерфейс Transforming
    var color: Int = -1 // при объявлении каждое поле нужно инициализировать

    lateinit var name: String // значение на момент определения неизвестно (только для объектных типов)
    // дополнительный конструктор вызывает основной
    constructor(rect: Rect) : this(rect.x, rect.y, rect.width, rect.height)

    // нужно явно указывать, что вы переопределяете метод
    override fun move(dx: Int, dy: Int) {
        x += dx; y += dy
    }

    // для каждого класса area() определяется по-своему
    override fun area(): Float {
        return (width*height).toFloat() // требуется явное приведение к вещественному числу
    }

    override fun toString(): String {
        return "x: $x y: $y width: $width, height: $height"
    }

    override fun resize(zoom: Int) {
        width *= zoom; height *= zoom
    }

    override fun rotate (direction: RotateDirection, centerX: Int, centerY: Int) {
        when (direction) {
            RotateDirection.Clockwise -> {
                y = - (y - centerY) + centerX
                x = (x - centerX) + centerY
            }
            RotateDirection.CounterClockwise -> {
                x = - (y - centerY) + centerX
                y = (x - centerX) + centerY
            }
        }
        val a = width
        width = height
        height = a
    }
}
